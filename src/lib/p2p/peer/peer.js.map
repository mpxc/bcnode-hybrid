{"version":3,"sources":["../../../src/p2p/peer/peer.es6"],"names":["inspect","require","debug","pull","BcBlock","isValidBlock","validateBlockSequence","PROTOCOL_PREFIX","Peer","constructor","bundle","peerId","_bundle","_peerId","getHeaders","from","to","toString","id","toB58String","Promise","resolve","reject","dialProtocol","err","conn","msg","jsonrpc","method","params","values","JSON","stringify","collect","wireData","blocks","map","b","deserializeBinary","Uint8Array","buffer","forEach","block","reason","getHeight","getHash","Error","e","getLatestHeader","result","getLatestHeaders","count","getMultiverse","query","expireRequest","setTimeout","clearTimeout"],"mappings":"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","file":"peer.js","sourcesContent":["/**\n * Copyright (c) 2017-present, blockcollider.org developers, All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type PeerInfo from 'peer-info'\nimport type { Bundle } from './../bundle'\n\nconst { inspect } = require('util')\nconst debug = require('debug')('bcnode:peer:peer')\nconst pull = require('pull-stream')\nconst { BcBlock } = require('../../protos/core_pb')\nconst { isValidBlock, validateBlockSequence } = require('../../bc/validation')\n\nconst { PROTOCOL_PREFIX } = require('../protocol/version')\n\nexport type HeaderIdentifier = [number, string] // height, hash\n\nexport class Peer {\n  _bundle: Bundle\n  _peerId: PeerInfo\n\n  constructor (bundle: Bundle, peerId: PeerInfo) {\n    this._bundle = bundle\n    this._peerId = peerId\n  }\n\n  get bundle (): Bundle {\n    return this._bundle\n  }\n\n  get peerId (): PeerInfo {\n    return this._peerId\n  }\n\n  getHeaders (from: HeaderIdentifier, to: HeaderIdentifier): Promise<*> {\n    debug(`getHeaders(${from.toString()}, ${to.toString()})`, this.peerId.id.toB58String())\n\n    return new Promise((resolve, reject) => {\n      this.bundle.dialProtocol(this.peerId, `${PROTOCOL_PREFIX}/rpc`, (err, conn) => {\n        if (err) {\n          return reject(err)\n        }\n\n        const msg = {\n          jsonrpc: '2.0',\n          method: 'getHeaders',\n          params: [from, to],\n          id: 42\n        }\n\n        pull(pull.values([JSON.stringify(msg)]), conn)\n\n        pull(\n          conn,\n          pull.collect((err, wireData) => {\n            if (err) {\n              return reject(err)\n            }\n\n            try {\n              const blocks = wireData.map(b => BcBlock.deserializeBinary(Uint8Array.from(b).buffer))\n              // validate each block separately\n              blocks.forEach(block => {\n                if (!isValidBlock(block)) {\n                  const reason = `Block ${block.getHeight()}, h: ${block.getHash()} is not a valid BC block`\n                  debug(reason)\n                  reject(new Error(reason))\n                }\n              })\n              // validate that the block sequence is valid\n              if (!validateBlockSequence(blocks)) {\n                const reason = `Block sequence not valid`\n                debug(reason)\n                reject(new Error(reason))\n              }\n              resolve(blocks)\n            } catch (e) {\n              return reject(e)\n            }\n          })\n        )\n      })\n    })\n  }\n\n  getLatestHeader (): Promise<*> {\n    debug('getLatestHeader()', this.peerId.id.toB58String())\n\n    return new Promise((resolve, reject) => {\n      this.bundle.dialProtocol(this.peerId, `${PROTOCOL_PREFIX}/rpc`, (err, conn) => {\n        if (err) {\n          return reject(err)\n        }\n\n        const msg = {\n          jsonrpc: '2.0',\n          method: 'getLatestHeader',\n          params: [],\n          id: 42\n        }\n\n        pull(pull.values([JSON.stringify(msg)]), conn)\n\n        pull(\n          conn,\n          pull.collect((err, wireData) => {\n            if (err) {\n              return reject(err)\n            }\n\n            try {\n              const result = BcBlock.deserializeBinary(Uint8Array.from(wireData[0]).buffer)\n              resolve(result)\n            } catch (e) {\n              return reject(e)\n            }\n          })\n        )\n      })\n    })\n  }\n\n  getLatestHeaders (count: number = 10): Promise<*> {\n    debug(`getLatestHeaders(${count})`, this.peerId.id.toB58String())\n\n    return new Promise((resolve, reject) => {\n      this.bundle.dialProtocol(this.peerId, `${PROTOCOL_PREFIX}/rpc`, (err, conn) => {\n        if (err) {\n          return reject(err)\n        }\n\n        const msg = {\n          jsonrpc: '2.0',\n          method: 'getLatestHeaders',\n          params: [count],\n          id: 42\n        }\n\n        pull(pull.values([JSON.stringify(msg)]), conn)\n\n        pull(\n          conn,\n          pull.collect((err, wireData) => {\n            if (err) {\n              return reject(err)\n            }\n\n            try {\n              const result = wireData.map(b => BcBlock.deserializeBinary(Uint8Array.from(b).buffer))\n              resolve(result)\n            } catch (e) {\n              return reject(e)\n            }\n          })\n        )\n      })\n    })\n  }\n\n  getMultiverse (): Promise<*> {\n    debug(`getMultiverse()`, this.peerId.id.toB58String())\n\n    return new Promise((resolve, reject) => {\n      this.bundle.dialProtocol(this.peerId, `${PROTOCOL_PREFIX}/rpc`, (err, conn) => {\n        if (err) {\n          return reject(err)\n        }\n\n        const msg = {\n          jsonrpc: '2.0',\n          method: 'getMultiverse',\n          params: [],\n          id: 42\n        }\n\n        pull(pull.values([JSON.stringify(msg)]), conn)\n\n        pull(\n          conn,\n          pull.collect((err, wireData) => {\n            if (err) {\n              return reject(err)\n            }\n\n            try {\n              const result = wireData.map(b => BcBlock.deserializeBinary(Uint8Array.from(b).buffer))\n              resolve(result)\n            } catch (e) {\n              return reject(e)\n            }\n          })\n        )\n      })\n    })\n  }\n\n  query (params: Object = {}): Promise<*> {\n    debug(`query(${inspect(params)})`, this.peerId.id.toB58String())\n\n    return new Promise((resolve, reject) => {\n      const expireRequest = setTimeout(() => {\n        return reject(new Error('peer query expired'))\n      }, 60 * 1000)\n\n      this.bundle.dialProtocol(this.peerId, `${PROTOCOL_PREFIX}/rpc`, (err, conn) => {\n        if (err) {\n          return reject(err)\n        }\n\n        const msg = {\n          jsonrpc: '2.0',\n          method: 'query',\n          params: [params],\n          id: 42\n        }\n\n        pull(pull.values([JSON.stringify(msg)]), conn)\n\n        pull(\n          conn,\n          pull.collect((err, wireData) => {\n            if (err) {\n              return reject(err)\n            }\n\n            try {\n              const result = wireData.map(b => BcBlock.deserializeBinary(Uint8Array.from(b).buffer))\n              clearTimeout(expireRequest)\n              resolve(result)\n            } catch (e) {\n              return reject(e)\n            }\n          })\n        )\n      })\n    })\n  }\n}\n\nexport default Peer\n"]}